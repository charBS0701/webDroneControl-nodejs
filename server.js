require("dotenv").config(); // .env ÌååÏùºÏóêÏÑú ÌôòÍ≤ΩÎ≥ÄÏàò Í∞ÄÏ†∏Ïò§Í∏∞
const express = require("express");
const http = require("http");
const SocketIO = require("socket.io");
const sdk = require("tellojs");
const cors = require("cors");

app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

export const app = express();
export const httpServer = http.createServer(app);
export const wsServer = SocketIO(httpServer, {
  cors: {
    origin: `${process.env}:3000`,
    methods: ["GET", "POST"],
  },
});

const dgram = require("dgram"); // ÎìúÎ°†Í≥ºÏùò UDPÌÜµÏã†ÏùÑ ÏúÑÌï®
export const commandSocket = dgram.createSocket("udp4"); // ÎìúÎ°†ÏóêÍ≤å Î™ÖÎ†πÏùÑ Î≥¥ÎÇ¥Îäî ÏÜåÏºì
export const receiveSocket = dgram.createSocket("udp4"); // ÎìúÎ°†ÏúºÎ°úÎ∂ÄÌÑ∞ ÏùëÎãµÏùÑ Î∞õÎäî ÏÜåÏºì
commandSocket.bind(process.env.DRONE_PORT); // UDP ÏÜåÏºìÏóê ÎìúÎ°† Ìè¨Ìä∏ Î∞îÏù∏Îî©
receiveSocket.bind({
  address: "0.0.0.0",
  port: process.env.DRONE_PORT,
  exclusive: true,
}); // UDP ÏÜåÏºìÏóê ÎìúÎ°† Ìè¨Ìä∏ Î∞îÏù∏Îî©

const handleListen = () => console.log(`Listening on http://localhost:3001 ‚úÖ`);
httpServer.listen(3001, handleListen); // ÏÑúÎ≤Ñ Ïã§Ìñâ

connectToDrone(); // ÎìúÎ°†Í≥º Ïó∞Í≤∞

// ÎìúÎ°† Ïó∞Í≤∞
const connectToDrone = async () => {
  try {
    await sdk.control.connect();
    console.log("Connected to drone! ‚úÖ");
  } catch (err) {
    console.log(`Drone Connect Error: ${err} ‚ùå`);
  }
};

// UDP ÏÑúÎ≤ÑÏôÄ ÎìúÎ°†Ïù¥ Ïó∞Í≤∞ÎêòÎ©¥
receiveSocket.on("listening", () => {
  const address = receiveSocket.address();
  console.log(`UDP Server listening on ${address.address}:${address.port} üöÄ`);
});

// ÎìúÎ°†ÏúºÎ°úÎ∂ÄÌÑ∞ Î©îÏãúÏßÄÎ•º Î∞õÏúºÎ©¥ 
receiveSocket.on("message", (msg, rinfo) => {
  console.log(`Drone Message: ${msg.toString()} ‚úÖ from :${rinfo.address} : ${rinfo.port}`);
});








//// ÎìúÎ°† Ïó∞Í≤∞Ïù¥ ÎÅäÍ∏∞Î©¥
// sdk.control.on("close", () => {
//   console.log("Drone Disconnected ‚ùå");
//   console.log("Trying to reconnect to drone...");
//   connectToDrone();
// });

// Send streamon
// client.send("streamon", DRONE_PORT, DRONE_HOST, null);
